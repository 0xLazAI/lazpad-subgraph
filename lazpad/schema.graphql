type Issue @entity(immutable: false){
  id: ID!
  type: String!
  issuer: String!
  issueToken: String!
  paymentToken: String
  depositStart: BigInt!
  duration: BigInt!
  launchTime: BigInt!
  price: BigInt!
  issuedTokenAmount: BigInt!
  targetRaised: BigInt!
  minDeposit: BigInt!
  maxDeposit: BigInt
  storageIssuedTokenAmount: BigInt!
  feeRate: BigInt
  hasFeeCharged: Boolean
  stopped: Boolean
  needAutoDistribution: Boolean
  isPaymentNative: Boolean
  soldOut: Boolean
  participantsSize: BigInt!
  paymentTokenReserve: BigInt!
  blockNumber: BigInt!
  createTimestamp: BigInt!
  updateTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserInvestment @entity(immutable: false){
  id: ID! #issueAddress_userAddress
  user: String!
  issue: String!
  issueToken: String! 
  allocation: BigInt!
  balance: BigInt!
  refunds: BigInt!
  hasClaimedRefunds: Boolean!
  hasClaimedIssuedToken: Boolean!
  hasEmergencyWithdraw: Boolean
  blockNumber: BigInt!
  createTimestamp: BigInt!
  updateTimestamp: BigInt!
  transactionHash: Bytes!
}

type UserDeposit @entity(immutable: false){
    id: ID!#transactionHash
    user: String!
    issue: String!
    issueToken: String! 
    buyAmount: BigInt!
    blockNumber: BigInt!
    createTimestamp: BigInt!
    updateTimestamp: BigInt!
    transactionHash: Bytes!
}

type UserAllocation @entity(immutable: false){
    id: ID!
    user: String!
    issueAddress: String!
    issueToken: String!
    allocation: BigInt!
    blockNumber: BigInt!
    createTimestamp: BigInt!
    updateTimestamp: BigInt!
    transactionHash: Bytes!
}

type UserRefund @entity(immutable: false){
    id: ID!#issueAddress_userAddress
    user: String!
    issueToken: String! 
    refundAmount: BigInt!
    blockNumber: BigInt!
    createTimestamp: BigInt!
    updateTimestamp: BigInt!
    transactionHash: Bytes!
}